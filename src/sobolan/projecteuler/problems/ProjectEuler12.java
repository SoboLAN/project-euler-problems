package sobolan.projecteuler.problems;

/**
 * @author Radu Murzea
 *
 * @problemstatement
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class ProjectEuler12 extends AbstractExecutableProblem
{
    private final int NR_MAX_DIVISORS = 500;

    @Override
    public String getResult()
    {
        int maxNrOfDivisors = 0;
        int triangle = 0;

        //we start at 5 because, from the problem statement, we know that the 5th triangle number has only 6 divisors
        int i = 5;
        while (true) {
            //calculate the triangle value
            triangle = (i * i + i) / 2;

            //the triangle has 1 and itself as divisors, so we count those from the start
            int nrOfDivisors = 2;

            //to find how many divisors X has, find how many it has between 2 and SQRT(X) and then double it
            int divisionLimit = (int) Math.sqrt(triangle);
            for (int divisor = 2; divisor <= divisionLimit; divisor++) {
                if (triangle % divisor == 0) {
                    nrOfDivisors += 2;
                }
            }

            //subtract 1 if number is perfect square
            if (divisionLimit * divisionLimit == triangle) {
                nrOfDivisors--;
            }

            if (nrOfDivisors > maxNrOfDivisors) {
                maxNrOfDivisors = nrOfDivisors;
            }

            if (maxNrOfDivisors > this.NR_MAX_DIVISORS) {
                break;
            }

            i++;
        }

        return Integer.toString(triangle);
    }
}
